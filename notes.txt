== Resistor: reduces the amount of current flowing in the circuit
i = V/R
i = amperes
V = volts
R = ohms

To read R with a multimeter (1) put black on COM port; (2) put red on OHM symbol port; (3) set dial to lowest resistance;
(4) measure both ends of the resistor when NOT connected to the circuit. If 1 shows, move to the next order of magnitude
 for the resistance.

== LED: long prong (+ cathode); short prong (- anode)
- RED LED needs 220ohm

== DIP Switch: 3 independent switches in one component
- When a switch is active it connects the pins
- 5v connected to one pin A of the switch
- input pin connected to pin B of the switch
- 220ohm resistor connected to pin B and GND. The resistor is needed to help defining the voltage provided to the input pin. Without the resistor, we would get a short circuit.
With the resistor: i = 5v/220ohm = 0.02amps
Without the resistor: i = 5v/~0ohm = short circuit

== Photoresistor: more light equals lower resistance; less light equals higher resistance
- Use 5v in one of the photoresistor's pins
- Use ANALOG input for the photoresistor followed by a 220ohm resistor into GND
- Note: analog pins are always input
- Note: analog pins read values between 0 and 1024

== RGB LED: four leads, longest lead is GND (common lead); each color lead needs a resistor
--- R
----- GND
---- G
--- B
- We can use discrete values for RGB (2^3 pins = 8 combinations)
  > use digitalWrite(PIN, ValueHighOrLow)

- We can also use PWM (pulse width modulation) 
  255: on all the time; 
  128: on 50% of time; 
  0: off all the time.
  The number of colors goes to 256^3 = (2^8)^3 = 2^24 combinations
  > use analogWrite(PIN, Value0to255) for PWM in pins that support it

- Note: we can also use 5v in the common lead, but 
> the colors will be active on LOW and inactive on HIGH (for digitalWrite)
> the PWM values will be 255 minus RGB component (for analogWrite)

== 7-segment display
- Pins:
> GND
> VCC (voltage common collector) = 5v
> DIO: outputs one byte per CLK cycle
> CLK: clocks binary data from the DIO pin

- Segments map to a byte: [DP|G|F|E|D|C|B|A]

  A
F   B
  G
E   C
  D   DP

#define SEG_A   0b00000001
#define SEG_B   0b00000010
#define SEG_C   0b00000100
#define SEG_D   0b00001000
#define SEG_E   0b00010000
#define SEG_F   0b00100000
#define SEG_G   0b01000000
#define SEG_DP  0b10000000

== Rotary encoders

Absolute encoders: map a code to a rotation angle of the toggle. Absolute encoders have a max and a min rotation value.
Relative encoders: the encoded value is relative to an original position without a max or min.

The relative encoder we use has 30 positions = 18degrees between positions.
Pinout:
- CLK: when we rotate the encoder, CLK transitions to HIGH while we are turning it, and transitions to LOW when it clicks in place.
- DT: signal is staggered with CLK to provide info about the rotation direction
If CLK goes HIGH before DT goes HIGH, we are rotating clockwise
If CLK goes HIGH after DT goes HIGH, we are rotating counter-clockwise

- SW: reads the push button on the encoder (if we push down on it, it captures a button click)
- VCC(labeled "+"): power supply
- GND: ground

== Serial writes

// Hello world
// bits/seconds (= baud)
void setup() {
  Serial.begin(9600);
}

void loop() {
  Serial.println("Hello");
  delay(500);
  Serial.println("Goodbye");
  delay(500);
}

== Interrupts

// calls myInterruptHandler when the value of an input pin (MY_PIN) changes
attachInterrupt(digitalPinToInterrupt(MY_PIN), myInterruptHandler, CHANGE);

myInterruptHandler is a void method where we read the pin values of interest and perform our update tasks based on the pin states.